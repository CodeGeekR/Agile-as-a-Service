---
---

<header class="bg-white border-b border-gray-200 sticky top-0 z-50 backdrop-blur-sm bg-white/95">
  <div class="px-4 sm:px-6 lg:px-8 py-3">
    <div class="flex items-center justify-between">
      <!-- Logo and Navigation -->
      <div class="flex items-center space-x-6">
        <div class="flex items-center space-x-3">
          <div class="w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
            <span class="text-white font-bold text-sm">A</span>
          </div>
          <h1 class="text-lg font-semibold text-gray-900 hidden sm:block">AaaS</h1>
        </div>
        
        <!-- Desktop Navigation -->
        <nav class="hidden lg:flex space-x-1">
          <a href="/" class="px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors" data-i18n="header.home">Home</a>
          <a href="/dashboard" class="px-3 py-2 text-sm font-medium text-gray-900 bg-gray-100 rounded-lg" data-i18n="header.dashboard">Dashboard</a>
          <a href="#" class="px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors" data-i18n="header.sprints">Sprints</a>
          <a href="#" class="px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors" data-i18n="header.retrospectives">Retrospectives</a>
        </nav>
      </div>
      
      <!-- Right Side Actions -->
      <div class="flex items-center space-x-3">
        <!-- Language Selector -->
        <div id="header-language-selector"></div>
        
        <!-- Notifications -->
        <button class="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors relative">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5-5-5h5zM15 17V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10"></path>
          </svg>
          <div class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></div>
        </button>
        
        <!-- User Menu -->
        <div class="flex items-center space-x-3">
          <div class="hidden sm:flex items-center space-x-2">
            <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
              <span class="text-white text-sm font-medium" id="user-avatar">JD</span>
            </div>
            <span class="text-sm font-medium text-gray-900" id="user-name">John Doe</span>
          </div>
          
          <!-- Mobile User Avatar -->
          <div class="sm:hidden w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
            <span class="text-white text-sm font-medium" id="user-avatar-mobile">JD</span>
          </div>
          
          <!-- Logout Button -->
          <button onclick="logout()" class="p-2 text-gray-400 hover:text-red-600 rounded-lg hover:bg-red-50 transition-colors" data-i18n-title="header.logout">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  // Import i18n and render language selector
  import('../i18n/index.js').then(i18nModule => {
    const { t, getLocale, setLocale } = i18nModule;
    
    // Render language selector in header
    const container = document.getElementById('header-language-selector');
    if (container) {
      renderHeaderLanguageSelector();
    }
    
    function renderHeaderLanguageSelector() {
      const currentLocale = getLocale();
      const languages = [
        { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
        { code: 'en', name: 'English', flag: 'üá∫üá∏' }
      ];
      const currentLanguage = languages.find(lang => lang.code === currentLocale);
      
      container.innerHTML = `
        <div class="relative">
          <button
            id="header-language-toggle"
            class="flex items-center space-x-2 px-3 py-2 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 transition-colors rounded-lg"
          >
            <span class="text-base">${currentLanguage?.flag}</span>
            <span class="hidden md:inline font-medium">${currentLanguage?.name}</span>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div id="header-language-dropdown" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg border border-gray-200 z-20 overflow-hidden">
            <div class="py-2">
              ${languages.map(language => `
                <button
                  onclick="changeHeaderLanguage('${language.code}')"
                  class="w-full flex items-center space-x-3 px-4 py-3 text-sm text-left hover:bg-gray-50 transition-colors ${
                    currentLocale === language.code ? 'bg-blue-50 text-blue-600 font-medium' : 'text-gray-700'
                  }"
                >
                  <span class="text-base">${language.flag}</span>
                  <span>${language.name}</span>
                  ${currentLocale === language.code ? `
                    <svg class="w-4 h-4 ml-auto text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  ` : ''}
                </button>
              `).join('')}
            </div>
            <div class="border-t border-gray-200 px-4 py-3">
              <p class="text-xs text-gray-500">
                ${currentLocale === 'es' ? 'Idioma detectado autom√°ticamente' : 'Language auto-detected'}
              </p>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('header-language-toggle').addEventListener('click', () => {
        const dropdown = document.getElementById('header-language-dropdown');
        dropdown.classList.toggle('hidden');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        const dropdown = document.getElementById('header-language-dropdown');
        const toggle = document.getElementById('header-language-toggle');
        if (toggle && dropdown && !toggle.contains(e.target) && !dropdown.contains(e.target)) {
          dropdown.classList.add('hidden');
        }
      });
    }
    
    // Global function to change language in header
    window.changeHeaderLanguage = function(locale) {
      setLocale(locale);
      
      // Close dropdown
      const dropdown = document.getElementById('header-language-dropdown');
      if (dropdown) {
        dropdown.classList.add('hidden');
      }
      
      // Re-render language selector
      setTimeout(() => {
        renderHeaderLanguageSelector();
      }, 100);
    };
  });
  
  // Update user info in header
  const userData = localStorage.getItem('aaas-user');
  if (userData) {
    const user = JSON.parse(userData);
    const avatar = user.name.split(' ').map(n => n[0]).join('');
    
    const userAvatarEl = document.getElementById('user-avatar');
    const userAvatarMobileEl = document.getElementById('user-avatar-mobile');
    const userNameEl = document.getElementById('user-name');
    
    if (userAvatarEl) userAvatarEl.textContent = avatar;
    if (userAvatarMobileEl) userAvatarMobileEl.textContent = avatar;
    if (userNameEl) userNameEl.textContent = user.name;
  }
  
  // Global logout function
  window.logout = function() {
    import('../i18n/index.js').then(i18nModule => {
      const { t } = i18nModule;
      const confirmMessage = t('header.logoutConfirm');
      
      if (confirm(confirmMessage)) {
        localStorage.removeItem('aaas-auth-token');
        localStorage.removeItem('aaas-user');
        localStorage.removeItem('aaas-data');
        window.location.href = '/';
      }
    });
  };
</script>
</header>
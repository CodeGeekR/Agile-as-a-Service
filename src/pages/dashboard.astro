---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
---

<Layout title="Dashboard - Sprint de Supervivencia Básica | AaaS">
  <Header />
  
  <main class="min-h-screen bg-gray-50 pb-20 lg:pb-0">
    <!-- Dashboard Content -->
    <div class="px-4 sm:px-6 lg:px-8 py-8">
      <!-- Sprint Header -->
      <div class="mb-8">
        <div class="bg-white rounded-xl border border-gray-200 p-6">
          <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
            <div class="flex-1">
              <div class="flex items-center space-x-3 mb-2">
                <h1 id="sprint-title" class="text-2xl font-bold text-gray-900" data-i18n="dashboard.title">
                  Sprint: "Supervivencia Básica Q1 2025"
                </h1>
                <span id="crisis-badge" class="hidden px-3 py-1 bg-red-100 text-red-800 text-sm font-medium rounded-full" data-i18n="dashboard.inCrisis">
                  🔥 En Crisis
                </span>
              </div>
              <p id="loading-text" class="text-gray-600" data-i18n="dashboard.loading">
                Cargando información del sprint...
              </p>
            </div>
            
            <div class="flex items-center space-x-3">
              <button id="create-story-btn" class="hidden lg:inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                <span data-i18n="dashboard.createStory">Crear Historia</span>
              </button>
              
              <button id="sprint-planning-btn" class="hidden lg:inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-medium transition-colors">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                <span data-i18n="dashboard.sprintPlanning">Sprint Planning</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Sprint Metrics -->
      <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8" id="sprint-metrics">
        <!-- Metrics will be populated by JavaScript -->
      </div>

      <!-- Main Dashboard Content -->
      <div class="grid lg:grid-cols-3 gap-8">
        <!-- Kanban Board -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-xl border border-gray-200 p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-6" data-i18n="dashboard.kanbanTitle">
              Tablero Kanban de la Existencia
            </h2>
            <div id="kanban-container">
              <!-- Kanban board will be populated by JavaScript -->
            </div>
          </div>
        </div>

        <!-- Burndown Chart -->
        <div class="lg:col-span-1">
          <div id="burndown-chart-container">
            <!-- Burndown chart will be populated by JavaScript -->
          </div>
        </div>
      </div>

      <!-- Recent Activity -->
      <div class="mt-8">
        <div class="bg-white rounded-xl border border-gray-200 p-6">
          <h2 class="text-lg font-semibold text-gray-900 mb-6" data-i18n="dashboard.recentActivity">
            Actividad Reciente del Sprint
          </h2>
          <div id="recent-activity" class="space-y-4">
            <!-- Recent activity will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>

    <!-- Mobile Bottom Navigation -->
    <div class="lg:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 z-50">
      <div class="flex items-center justify-around">
        <button class="flex flex-col items-center space-y-1 p-2 text-gray-600 hover:text-gray-900 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
          <span class="text-xs">Board</span>
        </button>
        
        <button class="flex flex-col items-center space-y-1 p-2 text-gray-600 hover:text-gray-900 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
          <span class="text-xs">Chart</span>
        </button>
        
        <!-- Fixed circular button with consistent UI -->
        <button class="w-12 h-12 bg-blue-600 hover:bg-blue-700 text-white rounded-full flex items-center justify-center transition-colors shadow-lg">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
        </button>
        
        <button class="flex flex-col items-center space-y-1 p-2 text-gray-600 hover:text-gray-900 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
          </svg>
          <span class="text-xs">Sprint</span>
        </button>
        
        <button class="flex flex-col items-center space-y-1 p-2 text-gray-600 hover:text-gray-900 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
          <span class="text-xs">Profile</span>
        </button>
      </div>
    </div>

    <!-- Modals Container -->
    <div id="modals-container"></div>
  </main>
</Layout>

<script>
  import('../i18n/index.js').then(i18nModule => {
    const { t, getLocale, forceUpdatePageContent } = i18nModule;
    
    // Check authentication
    const token = localStorage.getItem('aaas-auth-token');
    const userData = localStorage.getItem('aaas-user');
    
    if (!token || !userData) {
      window.location.href = '/';
      return;
    }
    
    const user = JSON.parse(userData);
    let appData = JSON.parse(localStorage.getItem('aaas-data') || '{}');
    
    // Initialize data if not exists
    if (!appData.stories || !appData.activeSprint) {
      initializeDefaultData();
    }
    
    function initializeDefaultData() {
      const currentLocale = getLocale();
      
      if (currentLocale === 'en') {
        appData = {
          stories: [
            {
              id: 1,
              title: "As a human being, I want to drink coffee so I don't collapse existentially",
              description: "Critical blocker: caffeine dependency management. Requires stakeholder analysis (barista), local coffee shop market research, and post-caffeine retrospective to optimize the process.",
              status: "TODO",
              points: 8,
              epicId: 1,
              sprintId: 1,
              assignee: "JD",
              priority: "CRITICAL",
              tags: ["blocker", "dependency"]
            },
            {
              id: 2,
              title: "As a functional member of society, I want to shower to be socially acceptable",
              description: "Critical story for maintaining hygiene standards according to social acceptance framework. Currently blocked by hot water availability and personal motivation.",
              status: "IN_PROGRESS",
              points: 5,
              epicId: 1,
              sprintId: 1,
              assignee: "JD",
              priority: "MEDIUM",
              tags: ["hygiene", "blocked"]
            },
            {
              id: 3,
              title: "As a person with a bed, I want to make it to feel productive",
              description: "Low-complexity story but high psychological impact. Successfully delivered after 3 sprints of refinement and multiple retrospectives on sheet-folding techniques.",
              status: "DONE",
              points: 2,
              epicId: 1,
              sprintId: 1,
              assignee: "JD",
              priority: "LOW",
              tags: ["quick-win", "psychological"]
            }
          ],
          activeSprint: {
            id: 1,
            name: "Basic Survival Sprint",
            startDate: new Date(Date.now() - 11 * 24 * 60 * 60 * 1000).toISOString(),
            endDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
            status: "ACTIVE",
            goal: "Maintain operational existence with minimum human functionality KPIs",
            totalPoints: 15,
            completedPoints: 2,
            userId: user.id
          }
        };
      } else {
        appData = {
          stories: [
            {
              id: 1,
              title: "Como ser humano, quiero beber café para no colapsar existencialmente",
              description: "Bloqueador crítico: gestión de dependencia de cafeína. Requiere análisis de stakeholders (barista), research de mercado de cafeterías locales y retrospectiva post-cafeína para optimizar el proceso.",
              status: "TODO",
              points: 8,
              epicId: 1,
              sprintId: 1,
              assignee: "JD",
              priority: "CRITICAL",
              tags: ["blocker", "dependency"]
            },
            {
              id: 2,
              title: "Como miembro funcional de la sociedad, quiero ducharme para ser socialmente aceptable",
              description: "Historia crítica para mantener estándares de higiene según framework de aceptación social. Actualmente bloqueada por disponibilidad de agua caliente y motivación personal.",
              status: "IN_PROGRESS",
              points: 5,
              epicId: 1,
              sprintId: 1,
              assignee: "JD",
              priority: "MEDIUM",
              tags: ["hygiene", "blocked"]
            },
            {
              id: 3,
              title: "Como persona con cama, quiero hacerla para sentirme productivo",
              description: "Historia de baja complejidad pero alto impacto psicológico. Entregada exitosamente después de 3 sprints de refinamiento y múltiples retrospectivas sobre técnicas de doblado de sábanas.",
              status: "DONE",
              points: 2,
              epicId: 1,
              sprintId: 1,
              assignee: "JD",
              priority: "LOW",
              tags: ["quick-win", "psychological"]
            }
          ],
          activeSprint: {
            id: 1,
            name: "Sprint de Supervivencia Básica",
            startDate: new Date(Date.now() - 11 * 24 * 60 * 60 * 1000).toISOString(),
            endDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
            status: "ACTIVE",
            goal: "Mantener la existencia operativa con KPIs mínimos de funcionalidad humana",
            totalPoints: 15,
            completedPoints: 2,
            userId: user.id
          }
        };
      }
      
      localStorage.setItem('aaas-data', JSON.stringify(appData));
    }
    
    function renderSprintMetrics() {
      const sprint = appData.activeSprint;
      const stories = appData.stories.filter(s => s.sprintId === sprint.id);
      
      const remainingPoints = sprint.totalPoints - sprint.completedPoints;
      const daysRemaining = Math.ceil((new Date(sprint.endDate) - new Date()) / (1000 * 60 * 60 * 24));
      const completedPercentage = Math.round((sprint.completedPoints / sprint.totalPoints) * 100);
      const velocity = (sprint.completedPoints / 11).toFixed(1); // 11 days elapsed
      
      document.getElementById('sprint-metrics').innerHTML = `
        <div class="bg-white rounded-xl border border-gray-200 p-4">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-red-600">${remainingPoints}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide" data-i18n="dashboard.pointsRemaining">Puntos Restantes</div>
            </div>
            <div class="w-8 h-8 bg-red-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-orange-600">${daysRemaining}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide" data-i18n="dashboard.daysRemaining">Días Restantes</div>
            </div>
            <div class="w-8 h-8 bg-orange-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-green-600">${completedPercentage}%</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide" data-i18n="dashboard.completed">Completado</div>
            </div>
            <div class="w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-blue-600">${velocity}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide" data-i18n="dashboard.velocity">Velocity</div>
            </div>
            <div class="w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
            </div>
          </div>
        </div>
      `;
      
      // Show crisis badge if needed
      if (remainingPoints > 10 && daysRemaining <= 3) {
        document.getElementById('crisis-badge').classList.remove('hidden');
      }
    }
    
    function renderKanbanBoard() {
      const stories = appData.stories.filter(s => s.sprintId === appData.activeSprint.id);
      const columns = [
        { id: 'TODO', title: t('dashboard.todo'), stories: stories.filter(s => s.status === 'TODO') },
        { id: 'IN_PROGRESS', title: t('dashboard.inProgress'), stories: stories.filter(s => s.status === 'IN_PROGRESS') },
        { id: 'DONE', title: t('dashboard.done'), stories: stories.filter(s => s.status === 'DONE') }
      ];
      
      const kanbanHTML = `
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          ${columns.map(column => `
            <div class="bg-gray-50 rounded-lg p-4 min-h-64">
              <div class="flex items-center justify-between mb-4">
                <h3 class="font-semibold text-gray-900 text-sm uppercase tracking-wide">${column.title}</h3>
                <span class="bg-gray-200 text-gray-600 text-xs px-2 py-1 rounded-full">${column.stories.length}</span>
              </div>
              <div class="space-y-3">
                ${column.stories.map(story => `
                  <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow cursor-pointer" onclick="viewStory(${story.id})">
                    <div class="flex justify-between items-start mb-2">
                      <h4 class="text-sm font-medium text-gray-900 line-clamp-2">${story.title}</h4>
                      <span class="inline-flex items-center justify-center w-6 h-6 text-xs font-bold rounded-full ${
                        story.points <= 3 ? 'bg-green-200 text-green-800' :
                        story.points <= 8 ? 'bg-yellow-200 text-yellow-800' :
                        'bg-red-200 text-red-800'
                      } ml-2 flex-shrink-0">${story.points}</span>
                    </div>
                    <div class="flex items-center justify-between">
                      <span class="text-xs text-gray-500">#${story.id}</span>
                      <div class="flex items-center space-x-1">
                        <div class="w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center">
                          <span class="text-white text-xs font-medium">${story.assignee}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                `).join('')}
                ${column.id === 'TODO' ? `
                  <button onclick="createNewStory()" class="w-full p-3 border-2 border-dashed border-gray-300 text-gray-500 hover:border-blue-500 hover:text-blue-500 transition-colors rounded-lg text-sm">
                    + ${t('dashboard.createNewStory')}
                  </button>
                ` : ''}
              </div>
            </div>
          `).join('')}
        </div>
      `;
      
      document.getElementById('kanban-container').innerHTML = kanbanHTML;
    }
    
    function renderBurndownChart() {
      const sprint = appData.activeSprint;
      const totalPoints = sprint.totalPoints;
      const completedPoints = sprint.completedPoints;
      const remainingPoints = totalPoints - completedPoints;
      const daysRemaining = Math.ceil((new Date(sprint.endDate) - new Date()) / (1000 * 60 * 60 * 24));
      const currentVelocity = completedPoints / 11; // 11 days elapsed
      const successProbability = Math.max(0, Math.min(100, 100 - (remainingPoints / (daysRemaining * currentVelocity)) * 20));
      
      document.getElementById('burndown-chart-container').innerHTML = `
        <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
          <div class="px-4 py-3 border-b border-gray-200">
            <h3 class="text-sm font-semibold text-gray-900" data-i18n="dashboard.burndownTitle">
              Gráfico Burndown: "${sprint.name}"
            </h3>
          </div>
          
          <div class="p-4">
            <div class="relative bg-gray-50 rounded-lg p-4 mb-4" style="height: 200px;">
              <canvas id="burndown-canvas" class="w-full h-full"></canvas>
            </div>
            
            <div class="grid grid-cols-2 gap-3 text-sm mb-4">
              <div class="bg-gray-50 p-3 rounded-lg">
                <div class="font-medium text-gray-700 text-xs mb-1" data-i18n="dashboard.pointsRemaining">Puntos Restantes</div>
                <div class="text-lg font-bold ${remainingPoints > 10 ? 'text-red-600' : 'text-orange-600'}">${remainingPoints}</div>
              </div>
              <div class="bg-gray-50 p-3 rounded-lg">
                <div class="font-medium text-gray-700 text-xs mb-1" data-i18n="dashboard.daysRemaining">Días Restantes</div>
                <div class="text-lg font-bold ${daysRemaining <= 3 ? 'text-red-600' : 'text-orange-600'}">${daysRemaining}</div>
              </div>
              <div class="bg-gray-50 p-3 rounded-lg">
                <div class="font-medium text-gray-700 text-xs mb-1">Velocity Actual</div>
                <div class="text-lg font-bold ${currentVelocity < 1 ? 'text-red-600' : 'text-green-600'}">${currentVelocity.toFixed(1)}</div>
              </div>
              <div class="bg-gray-50 p-3 rounded-lg">
                <div class="font-medium text-gray-700 text-xs mb-1" data-i18n="dashboard.successProbability">Probabilidad de Éxito</div>
                <div class="text-lg font-bold ${successProbability < 30 ? 'text-red-600' : successProbability < 70 ? 'text-orange-600' : 'text-green-600'}">${Math.round(successProbability)}%</div>
              </div>
            </div>
            
            <div class="p-3 rounded-lg text-sm ${
              successProbability < 30 ? 'bg-red-50 border border-red-200' : 
              successProbability < 70 ? 'bg-yellow-50 border border-yellow-200' :
              'bg-green-50 border border-green-200'
            }">
              <p class="${
                successProbability < 30 ? 'text-red-800' : 
                successProbability < 70 ? 'text-yellow-800' :
                'text-green-800'
              }">
                <strong>
                  ${successProbability < 30 ? '🚨 ' + t('dashboard.systemAlert') : 
                   successProbability < 70 ? '⚠️ ' + t('dashboard.systemWarning') :
                   '✅ ' + t('dashboard.systemStatus')}
                </strong> 
                ${successProbability < 30 ? t('dashboard.alertMessage') :
                  successProbability < 70 ? t('dashboard.warningMessage') :
                  t('dashboard.statusMessage')
                }
              </p>
            </div>
          </div>
        </div>
      `;
      
      // Draw simple burndown chart
      setTimeout(() => {
        drawBurndownChart();
      }, 100);
    }
    
    function drawBurndownChart() {
      const canvas = document.getElementById('burndown-canvas');
      if (!canvas) return;
      
      const ctx = canvas.getContext('2d');
      const rect = canvas.getBoundingClientRect();
      canvas.width = rect.width * window.devicePixelRatio;
      canvas.height = rect.height * window.devicePixelRatio;
      ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
      
      const width = rect.width;
      const height = rect.height;
      const padding = 40;
      
      const sprint = appData.activeSprint;
      const totalPoints = sprint.totalPoints;
      const completedPoints = sprint.completedPoints;
      
      // Clear canvas
      ctx.clearRect(0, 0, width, height);
      
      // Draw axes
      ctx.strokeStyle = '#E5E7EB';
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(padding, padding);
      ctx.lineTo(padding, height - padding);
      ctx.lineTo(width - padding, height - padding);
      ctx.stroke();
      
      // Draw ideal line (green dashed)
      ctx.strokeStyle = '#10B981';
      ctx.lineWidth = 2;
      ctx.setLineDash([5, 5]);
      ctx.beginPath();
      ctx.moveTo(padding, padding);
      ctx.lineTo(width - padding, height - padding);
      ctx.stroke();
      ctx.setLineDash([]);
      
      // Draw actual line (blue solid)
      ctx.strokeStyle = '#3B82F6';
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.moveTo(padding, padding);
      
      // Simulate actual progress
      const currentDay = 11; // 11 days elapsed
      const totalDays = 14;
      const currentX = padding + ((currentDay / totalDays) * (width - 2 * padding));
      const currentY = height - padding - ((completedPoints / totalPoints) * (height - 2 * padding));
      
      ctx.lineTo(currentX, currentY);
      ctx.stroke();
      
      // Draw current point
      ctx.fillStyle = '#3B82F6';
      ctx.beginPath();
      ctx.arc(currentX, currentY, 4, 0, 2 * Math.PI);
      ctx.fill();
      
      // Add labels
      ctx.fillStyle = '#6B7280';
      ctx.font = '12px Inter, sans-serif';
      ctx.textAlign = 'left';
      ctx.fillText('0', padding - 15, height - padding + 5);
      ctx.fillText(totalPoints.toString(), padding - 15, padding + 5);
      ctx.fillText('Día 0', padding, height - padding + 20);
      ctx.fillText('Día 14', width - padding - 20, height - padding + 20);
    }
    
    function renderRecentActivity() {
      const currentLocale = getLocale();
      const activities = [
        {
          type: 'story_blocked',
          message: currentLocale === 'en' ? 'Story blocked:' : 'Historia bloqueada:',
          detail: currentLocale === 'en' ? 'Shower task blocked by hot water dependency' : 'Tarea de ducha bloqueada por dependencia de agua caliente',
          time: currentLocale === 'en' ? '2 hours ago' : 'Hace 2 horas',
          icon: '🚫',
          color: 'text-red-600'
        },
        {
          type: 'story_completed',
          message: currentLocale === 'en' ? 'Story completed:' : 'Historia completada:',
          detail: currentLocale === 'en' ? 'Bed making task delivered successfully' : 'Tarea de hacer la cama entregada exitosamente',
          time: currentLocale === 'en' ? '1 day ago' : 'Hace 1 día',
          icon: '✅',
          color: 'text-green-600'
        },
        {
          type: 'impediment',
          message: currentLocale === 'en' ? 'Impediment identified:' : 'Impedimento identificado:',
          detail: currentLocale === 'en' ? 'Coffee machine requires stakeholder negotiation' : 'Máquina de café requiere negociación con stakeholders',
          time: currentLocale === 'en' ? '2 days ago' : 'Hace 2 días',
          icon: '⚠️',
          color: 'text-yellow-600'
        }
      ];
      
      const activityHTML = activities.map(activity => `
        <div class="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
          <span class="text-lg">${activity.icon}</span>
          <div class="flex-1 min-w-0">
            <p class="text-sm">
              <span class="${activity.color} font-medium">${activity.message}</span>
              <span class="text-gray-900">${activity.detail}</span>
            </p>
            <p class="text-xs text-gray-500 mt-1">${activity.time}</p>
          </div>
        </div>
      `).join('');
      
      document.getElementById('recent-activity').innerHTML = activityHTML;
    }
    
    // Global functions
    window.viewStory = function(storyId) {
      const story = appData.stories.find(s => s.id === storyId);
      if (!story) return;
      
      alert(`Historia: ${story.title}\n\nDescripción: ${story.description}\n\nPuntos: ${story.points}\nEstado: ${story.status}`);
    };
    
    window.createNewStory = function() {
      const title = prompt(t('story.title') + ':');
      if (!title) return;
      
      const points = parseInt(prompt('Story Points (1-21):')) || 3;
      
      const newStory = {
        id: Date.now(),
        title: title,
        description: t('story.noSpecificDescription'),
        status: 'TODO',
        points: points,
        epicId: 1,
        sprintId: appData.activeSprint.id,
        assignee: 'JD',
        priority: 'MEDIUM',
        tags: []
      };
      
      appData.stories.push(newStory);
      appData.activeSprint.totalPoints += points;
      localStorage.setItem('aaas-data', JSON.stringify(appData));
      
      renderPage();
    };
    
    function renderPage() {
      document.getElementById('loading-text').style.display = 'none';
      document.getElementById('create-story-btn').classList.remove('hidden');
      document.getElementById('sprint-planning-btn').classList.remove('hidden');
      
      renderSprintMetrics();
      renderKanbanBoard();
      renderBurndownChart();
      renderRecentActivity();
      forceUpdatePageContent();
    }
    
    // Listen for language changes
    window.addEventListener('localeChanged', renderPage);
    
    // Initial render
    renderPage();
    
    // Show sprint planning message
    document.getElementById('sprint-planning-btn').addEventListener('click', () => {
      alert(t('dashboard.sprintPlanningMessage'));
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
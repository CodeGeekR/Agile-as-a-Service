---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
---

<Layout title="Dashboard - Sprint de Supervivencia B√°sica | AaaS">
  <Header />
  
  <main class="min-h-screen bg-gray-50">
    <!-- Header del Dashboard -->
    <div class="bg-white border-b border-gray-200 sticky top-16 z-40">
      <div class="px-4 sm:px-6 lg:px-8 py-6">
        <div class="flex flex-col space-y-4 lg:flex-row lg:items-center lg:justify-between lg:space-y-0">
          <div class="min-w-0 flex-1">
            <div class="flex items-center space-x-3">
              <div class="flex-shrink-0">
                <div class="w-10 h-10 bg-gradient-to-br from-red-500 to-orange-600 rounded-xl flex items-center justify-center">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
              </div>
              <div class="min-w-0 flex-1">
                <h1 id="dashboard-title" class="text-2xl font-bold text-gray-900" data-i18n="dashboard.title">
                  Sprint: "Supervivencia B√°sica Q1 2025"
                </h1>
                <p class="text-sm text-gray-500 mt-1" id="dashboard-loading" data-i18n="dashboard.loading">
                  Cargando informaci√≥n del sprint...
                </p>
              </div>
            </div>
          </div>
          
          <div class="flex items-center space-x-3">
            <span id="crisis-indicator" class="hidden inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
              <div class="w-2 h-2 bg-red-500 rounded-full mr-2 animate-pulse"></div>
              <span data-i18n="dashboard.inCrisis">üî• En Crisis</span>
            </span>
            <button id="create-story-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              <span data-i18n="dashboard.createStory">Crear Historia</span>
            </button>
            <button id="sprint-planning-btn" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              <span data-i18n="dashboard.sprintPlanning">Sprint Planning</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Contenido Principal -->
    <div class="px-4 sm:px-6 lg:px-8 py-6 space-y-8">
      <!-- M√©tricas del Sprint -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="sprint-metrics">
        <!-- Las m√©tricas se cargar√°n din√°micamente -->
      </div>

      <!-- Layout Principal -->
      <div class="grid grid-cols-1 xl:grid-cols-4 gap-8">
        <!-- Tablero Kanban (Columna Principal) -->
        <div class="xl:col-span-3">
          <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
              <h2 class="text-lg font-semibold text-gray-900" data-i18n="dashboard.kanbanTitle">
                Tablero Kanban de la Existencia
              </h2>
            </div>
            <div class="p-6">
              <div id="kanban-board">
                <!-- El tablero Kanban se cargar√° aqu√≠ -->
              </div>
            </div>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="xl:col-span-1 space-y-6">
          <!-- Gr√°fico Burndown -->
          <div id="burndown-chart-container">
            <!-- El gr√°fico burndown se cargar√° aqu√≠ -->
          </div>

          <!-- Actividad Reciente del Sprint -->
          <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
            <div class="px-4 py-3 border-b border-gray-200">
              <h3 class="text-sm font-semibold text-gray-900" data-i18n="dashboard.recentActivity">
                Actividad Reciente del Sprint
              </h3>
            </div>
            <div id="recent-activity-content" class="p-4">
              <!-- La actividad reciente se cargar√° aqu√≠ -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Modales -->
  <div id="modals-container"></div>
  
  <!-- Stand-up Modal -->
  <div id="standup-modal-container"></div>
</Layout>

<script>
  // Import required modules
  import('../i18n/index.js').then(i18nModule => {
    const { t, getLocale, forceUpdatePageContent } = i18nModule;
    
    // Check authentication
    const token = localStorage.getItem('aaas-auth-token');
    const userData = localStorage.getItem('aaas-user');
    
    if (!token || !userData) {
      window.location.href = '/';
      return;
    }
    
    const user = JSON.parse(userData);
    let appData = JSON.parse(localStorage.getItem('aaas-data') || '{}');
    
    // Initialize data if not exists
    if (!appData.stories || !appData.activeSprint) {
      initializeDefaultData();
    }

    // Recent Activity Management
    let recentActivities = JSON.parse(localStorage.getItem('aaas-recent-activities') || '[]');
    
    function addRecentActivity(type, storyTitle, details = '') {
      const activity = {
        id: Date.now(),
        type: type, // 'blocked', 'completed', 'impediment', 'moved', 'created'
        storyTitle: storyTitle,
        details: details,
        timestamp: new Date().toISOString()
      };
      
      // Add to beginning of array
      recentActivities.unshift(activity);
      
      // Keep only last 10 activities
      recentActivities = recentActivities.slice(0, 10);
      
      // Save to localStorage
      localStorage.setItem('aaas-recent-activities', JSON.stringify(recentActivities));
      
      // Update UI
      renderRecentActivity();
    }
    
    function renderRecentActivity() {
      const container = document.getElementById('recent-activity-content');
      if (!container) return;
      
      if (recentActivities.length === 0) {
        container.innerHTML = `
          <div class="text-center py-6">
            <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
              <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <p class="text-sm text-gray-500">No hay actividad reciente</p>
          </div>
        `;
        return;
      }
      
      const activitiesHTML = recentActivities.map(activity => {
        const timeAgo = getTimeAgo(activity.timestamp);
        const { icon, color, message } = getActivityDisplay(activity);
        
        return `
          <div class="flex items-start space-x-3 py-3 border-b border-gray-100 last:border-b-0">
            <div class="flex-shrink-0 w-6 h-6 ${color} rounded-full flex items-center justify-center">
              ${icon}
            </div>
            <div class="flex-1 min-w-0">
              <p class="text-sm text-gray-900">
                <span class="font-medium">${message}:</span>
                <span class="text-gray-600">"${activity.storyTitle}"</span>
                ${activity.details ? `<span class="text-gray-500">${activity.details}</span>` : ''}
              </p>
              <p class="text-xs text-gray-500 mt-1">${timeAgo}</p>
            </div>
          </div>
        `;
      }).join('');
      
      container.innerHTML = activitiesHTML;
    }
    
    function getActivityDisplay(activity) {
      const currentLocale = getLocale();
      
      switch (activity.type) {
        case 'blocked':
          return {
            icon: 'üö´',
            color: 'bg-red-100 text-red-600',
            message: currentLocale === 'en' ? 'Story blocked' : t('dashboard.storyBlocked')
          };
        case 'completed':
          return {
            icon: '‚úÖ',
            color: 'bg-green-100 text-green-600',
            message: currentLocale === 'en' ? 'Story completed' : t('dashboard.storyCompleted')
          };
        case 'impediment':
          return {
            icon: '‚ö†Ô∏è',
            color: 'bg-yellow-100 text-yellow-600',
            message: currentLocale === 'en' ? 'Impediment identified' : t('dashboard.impedimentIdentified')
          };
        case 'moved':
          return {
            icon: 'üîÑ',
            color: 'bg-blue-100 text-blue-600',
            message: currentLocale === 'en' ? 'Story moved' : 'Historia movida'
          };
        case 'created':
          return {
            icon: '‚ûï',
            color: 'bg-purple-100 text-purple-600',
            message: currentLocale === 'en' ? 'Story created' : 'Historia creada'
          };
        default:
          return {
            icon: 'üìù',
            color: 'bg-gray-100 text-gray-600',
            message: currentLocale === 'en' ? 'Story updated' : 'Historia actualizada'
          };
      }
    }
    
    function getTimeAgo(timestamp) {
      const now = new Date();
      const activityTime = new Date(timestamp);
      const diffInMinutes = Math.floor((now - activityTime) / (1000 * 60));
      const currentLocale = getLocale();
      
      if (diffInMinutes < 1) {
        return currentLocale === 'en' ? 'Just now' : 'Ahora mismo';
      } else if (diffInMinutes < 60) {
        return currentLocale === 'en' ? 
          `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago` :
          `Hace ${diffInMinutes} minuto${diffInMinutes > 1 ? 's' : ''}`;
      } else if (diffInMinutes < 1440) { // Less than 24 hours
        const hours = Math.floor(diffInMinutes / 60);
        return currentLocale === 'en' ? 
          t('dashboard.hoursAgo', { hours }) :
          t('dashboard.hoursAgo', { hours });
      } else {
        const days = Math.floor(diffInMinutes / 1440);
        return currentLocale === 'en' ? 
          t('dashboard.daysAgo', { days }) :
          t('dashboard.daysAgo', { days });
      }
    }
    
    function initializeDefaultData() {
      const currentLocale = getLocale();
      
      if (!appData.epics) {
        appData.epics = [
          {
            id: 1,
            title: currentLocale === 'en' ? "Basic Survival Q1 2025" : "Supervivencia B√°sica Q1 2025",
            description: currentLocale === 'en' ? "Fundamental epic to maintain operational existence" : "Epic fundamental para mantener la existencia operativa",
            status: "ACTIVE",
            userId: user.id
          }
        ];
      }
      
      if (!appData.stories) {
        appData.stories = currentLocale === 'en' ? [
          {
            id: 1,
            title: "As a human being, I want to drink coffee so I don't collapse existentially",
            description: "Critical blocker: caffeine dependency management. Requires stakeholder analysis (barista), local coffee shop market research, and post-caffeine retrospective to optimize the process.",
            status: "TODO",
            points: 8,
            epicId: 1,
            sprintId: 1,
            assignee: user.name.split(' ').map(n => n[0]).join(''),
            priority: "CRITICAL",
            tags: ["blocker", "dependency"]
          },
          {
            id: 2,
            title: "As a functional member of society, I want to shower to be socially acceptable",
            description: "Critical story for maintaining hygiene standards according to social acceptance framework. Currently blocked by hot water availability and personal motivation.",
            status: "IN_PROGRESS",
            points: 5,
            epicId: 1,
            sprintId: 1,
            assignee: user.name.split(' ').map(n => n[0]).join(''),
            priority: "MEDIUM",
            tags: ["hygiene", "blocked"]
          },
          {
            id: 3,
            title: "As a person with a bed, I want to make it to feel productive",
            description: "Low-complexity story but high psychological impact. Successfully delivered after 3 sprints of refinement and multiple retrospectives on sheet-folding techniques.",
            status: "DONE",
            points: 2,
            epicId: 1,
            sprintId: 1,
            assignee: user.name.split(' ').map(n => n[0]).join(''),
            priority: "LOW",
            tags: ["quick-win", "psychological"]
          }
        ] : [
          {
            id: 1,
            title: "Como ser humano, quiero beber caf√© para no colapsar existencialmente",
            description: "Bloqueador cr√≠tico: gesti√≥n de dependencia de cafe√≠na. Requiere an√°lisis de stakeholders (barista), research de mercado de cafeter√≠as locales y retrospectiva post-cafe√≠na para optimizar el proceso.",
            status: "TODO",
            points: 8,
            epicId: 1,
            sprintId: 1,
            assignee: user.name.split(' ').map(n => n[0]).join(''),
            priority: "CRITICAL",
            tags: ["blocker", "dependency"]
          },
          {
            id: 2,
            title: "Como miembro funcional de la sociedad, quiero ducharme para ser socialmente aceptable",
            description: "Historia cr√≠tica para mantener est√°ndares de higiene seg√∫n framework de aceptaci√≥n social. Actualmente bloqueada por disponibilidad de agua caliente y motivaci√≥n personal.",
            status: "IN_PROGRESS",
            points: 5,
            epicId: 1,
            sprintId: 1,
            assignee: user.name.split(' ').map(n => n[0]).join(''),
            priority: "MEDIUM",
            tags: ["hygiene", "blocked"]
          },
          {
            id: 3,
            title: "Como persona con cama, quiero hacerla para sentirme productivo",
            description: "Historia de baja complejidad pero alto impacto psicol√≥gico. Entregada exitosamente despu√©s de 3 sprints de refinamiento y m√∫ltiples retrospectivas sobre t√©cnicas de doblado de s√°banas.",
            status: "DONE",
            points: 2,
            epicId: 1,
            sprintId: 1,
            assignee: user.name.split(' ').map(n => n[0]).join(''),
            priority: "LOW",
            tags: ["quick-win", "psychological"]
          }
        ];
      }
      
      if (!appData.activeSprint) {
        appData.activeSprint = {
          id: 1,
          name: currentLocale === 'en' ? "Basic Survival Sprint" : "Sprint de Supervivencia B√°sica",
          startDate: new Date(Date.now() - 11 * 24 * 60 * 60 * 1000).toISOString(),
          endDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
          status: "ACTIVE",
          goal: currentLocale === 'en' ? "Maintain operational existence with minimum human functionality KPIs" : "Mantener la existencia operativa con KPIs m√≠nimos de funcionalidad humana",
          totalPoints: 15,
          completedPoints: 2,
          userId: user.id
        };
      }
      
      localStorage.setItem('aaas-data', JSON.stringify(appData));
      
      // Initialize some recent activities if none exist
      if (recentActivities.length === 0) {
        const sampleActivities = currentLocale === 'en' ? [
          {
            id: Date.now() - 7200000,
            type: 'blocked',
            storyTitle: 'Make coffee',
            details: ' waiting for external dependency resolution (buy coffee)',
            timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
          },
          {
            id: Date.now() - 86400000,
            type: 'completed',
            storyTitle: 'Make the bed',
            details: ' moved to Done',
            timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
          },
          {
            id: Date.now() - 172800000,
            type: 'impediment',
            storyTitle: 'Lack of motivation affecting sprint velocity',
            details: '',
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
          }
        ] : [
          {
            id: Date.now() - 7200000,
            type: 'blocked',
            storyTitle: 'Hacer caf√©',
            details: ' est√° esperando resoluci√≥n de dependencia externa (comprar caf√©)',
            timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
          },
          {
            id: Date.now() - 86400000,
            type: 'completed',
            storyTitle: 'Hacer la cama',
            details: ' movida a Done',
            timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
          },
          {
            id: Date.now() - 172800000,
            type: 'impediment',
            storyTitle: 'Falta de motivaci√≥n afectando el velocity del sprint',
            details: '',
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
          }
        ];
        
        recentActivities = sampleActivities;
        localStorage.setItem('aaas-recent-activities', JSON.stringify(recentActivities));
      }
    }
    
    function renderSprintMetrics() {
      const sprint = appData.activeSprint;
      const stories = appData.stories.filter(s => s.sprintId === sprint.id);
      const completedStories = stories.filter(s => s.status === 'DONE');
      const inProgressStories = stories.filter(s => s.status === 'IN_PROGRESS');
      const remainingPoints = sprint.totalPoints - sprint.completedPoints;
      const daysRemaining = Math.ceil((new Date(sprint.endDate) - new Date()) / (1000 * 60 * 60 * 24));
      const velocity = sprint.completedPoints / Math.max(1, 11); // 11 days elapsed
      
      const metricsContainer = document.getElementById('sprint-metrics');
      metricsContainer.innerHTML = `
        <div class="bg-white rounded-xl border border-gray-200 p-4">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-red-600">${remainingPoints}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide" data-i18n="dashboard.pointsRemaining">Puntos Restantes</div>
            </div>
            <div class="w-8 h-8 bg-red-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-orange-600">${daysRemaining}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide" data-i18n="dashboard.daysRemaining">D√≠as Restantes</div>
            </div>
            <div class="w-8 h-8 bg-orange-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-green-600">${sprint.completedPoints}/${sprint.totalPoints}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide" data-i18n="dashboard.completed">Completado</div>
            </div>
            <div class="w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-blue-600">${velocity.toFixed(1)}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide" data-i18n="dashboard.velocity">Velocidad</div>
            </div>
            <div class="w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
            </div>
          </div>
        </div>
      `;
    }
    
    function renderKanbanBoard() {
      const stories = appData.stories.filter(s => s.sprintId === appData.activeSprint.id);
      const columns = [
        { id: 'TODO', title: t('dashboard.todo'), bgColor: 'bg-gray-50', limit: null },
        { id: 'IN_PROGRESS', title: t('dashboard.inProgress'), bgColor: 'bg-blue-50', limit: 3 },
        { id: 'DONE', title: t('dashboard.done'), bgColor: 'bg-green-50', limit: null }
      ];
      
      const kanbanContainer = document.getElementById('kanban-board');
      kanbanContainer.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 h-full">
          ${columns.map(column => {
            const columnStories = stories.filter(story => story.status === column.id);
            const isOverLimit = column.limit && columnStories.length > column.limit;
            
            return `
              <div class="${column.bgColor} rounded-lg p-4 min-h-96 transition-all duration-200" 
                   data-column="${column.id}"
                   ondrop="handleDrop(event, '${column.id}')" 
                   ondragover="handleDragOver(event)">
                <div class="flex items-center justify-between mb-4">
                  <div class="flex items-center space-x-2">
                    <h2 class="font-semibold text-text-primary text-sm uppercase tracking-wide">
                      ${column.title}
                    </h2>
                    ${column.limit ? `
                      <span class="text-xs px-2 py-1 rounded ${isOverLimit ? 'bg-red-100 text-red-800' : 'bg-gray-200 text-gray-600'}">
                        WIP: ${columnStories.length}/${column.limit}
                      </span>
                    ` : ''}
                  </div>
                  <span class="bg-text-secondary text-white text-xs px-2 py-1 rounded-full">
                    ${columnStories.length}
                  </span>
                </div>
                
                ${isOverLimit ? `
                  <div class="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
                    <p class="text-red-800 text-xs">
                      ‚ö†Ô∏è <strong>L√≠mite WIP excedido:</strong> ${t('dashboard.wipLimit')}
                    </p>
                  </div>
                ` : ''}
                
                <div class="space-y-3">
                  ${columnStories.map(story => `
                    <div class="bg-bg-secondary p-4 rounded-lg shadow-sm border border-border-color hover:shadow-md transition-all duration-200 cursor-move group"
                         draggable="true"
                         data-story-id="${story.id}"
                         ondragstart="handleDragStart(event, ${story.id})">
                      <div class="flex justify-between items-start mb-3">
                        <div class="flex items-start space-x-2 flex-1">
                          <span class="text-sm">${getPriorityIcon(story.priority)}</span>
                          <h3 class="text-sm font-medium text-text-primary line-clamp-2 group-hover:text-primary transition-colors">
                            ${story.title}
                          </h3>
                        </div>
                        <span class="inline-flex items-center justify-center w-6 h-6 text-xs font-bold rounded-full ${getPointsColor(story.points)} ml-2 flex-shrink-0">
                          ${story.points}
                        </span>
                      </div>
                      
                      ${story.description ? `
                        <p class="text-xs text-text-secondary mb-3 line-clamp-2">
                          ${story.description.substring(0, 100)}...
                        </p>
                      ` : ''}
                      
                      <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                          <span class="text-xs text-text-secondary">#${story.id}</span>
                          <span class="px-2 py-1 text-xs font-medium rounded ${getStatusColors(story.status)}">
                            ${story.status.replace('_', ' ')}
                          </span>
                        </div>
                        
                        <div class="flex items-center space-x-1">
                          <div class="w-5 h-5 bg-primary rounded-full flex items-center justify-center">
                            <span class="text-white text-xs font-medium">${story.assignee}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  `).join('')}
                </div>
                
                ${column.id === 'TODO' ? `
                  <button onclick="showCreateStoryModal()" class="w-full mt-4 p-3 border-2 border-dashed border-border-color text-text-secondary hover:border-primary hover:text-primary transition-colors rounded-lg text-sm">
                    ${t('dashboard.createNewStory')}
                  </button>
                ` : ''}
              </div>
            `;
          }).join('')}
        </div>
      `;
    }
    
    // Drag and Drop Functions
    window.handleDragStart = function(event, storyId) {
      event.dataTransfer.setData('text/plain', storyId);
      event.target.style.opacity = '0.5';
    };
    
    window.handleDragOver = function(event) {
      event.preventDefault();
      event.dataTransfer.dropEffect = 'move';
    };
    
    window.handleDrop = function(event, newStatus) {
      event.preventDefault();
      const storyId = parseInt(event.dataTransfer.getData('text/plain'));
      const story = appData.stories.find(s => s.id === storyId);
      
      if (story && story.status !== newStatus) {
        // Check WIP limits
        const column = [
          { id: 'TODO', limit: null },
          { id: 'IN_PROGRESS', limit: 3 },
          { id: 'DONE', limit: null }
        ].find(col => col.id === newStatus);
        
        if (column.limit) {
          const currentCount = appData.stories.filter(s => s.sprintId === appData.activeSprint.id && s.status === newStatus).length;
          if (currentCount >= column.limit) {
            alert(`‚ö†Ô∏è ${t('dashboard.wipLimitReached')}`);
            return;
          }
        }
        
        const oldStatus = story.status;
        story.status = newStatus;
        
        // Update sprint points
        if (newStatus === 'DONE' && oldStatus !== 'DONE') {
          appData.activeSprint.completedPoints += story.points;
          addRecentActivity('completed', story.title, ' movida a Done');
          showCompletionCelebration(story);
        } else if (oldStatus === 'DONE' && newStatus !== 'DONE') {
          appData.activeSprint.completedPoints -= story.points;
          addRecentActivity('moved', story.title, ` movida de Done a ${newStatus}`);
        } else {
          addRecentActivity('moved', story.title, ` movida de ${oldStatus} a ${newStatus}`);
        }
        
        // Save data
        localStorage.setItem('aaas-data', JSON.stringify(appData));
        
        // Re-render components
        renderSprintMetrics();
        renderKanbanBoard();
        renderBurndownChart();
      }
      
      // Reset opacity
      document.querySelectorAll('[draggable="true"]').forEach(el => {
        el.style.opacity = '1';
      });
    };
    
    function showCompletionCelebration(story) {
      const celebration = document.createElement('div');
      celebration.innerHTML = `
        <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                    background: linear-gradient(45deg, #00875A, #36B37E); color: white; 
                    padding: 20px; border-radius: 10px; z-index: 1000; text-align: center;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3); animation: celebrationPop 0.5s ease-out;">
          <div style="font-size: 24px; margin-bottom: 10px;">üéâ</div>
          <div style="font-weight: bold; margin-bottom: 5px;">¬°Historia Completada!</div>
          <div style="font-size: 14px; opacity: 0.9;">+${story.points} puntos de productividad existencial</div>
        </div>
      `;
      
      document.body.appendChild(celebration);
      
      setTimeout(() => {
        document.body.removeChild(celebration);
      }, 3000);
    }
    
    function getPriorityIcon(priority) {
      const icons = {
        CRITICAL: 'üî•',
        HIGH: '‚¨ÜÔ∏è',
        MEDIUM: '‚û°Ô∏è',
        LOW: '‚¨áÔ∏è'
      };
      return icons[priority] || '‚û°Ô∏è';
    }
    
    function getPointsColor(points) {
      return points <= 3 ? 'bg-green-200 text-green-800' : 
             points <= 5 ? 'bg-yellow-200 text-yellow-800' : 
             'bg-red-200 text-red-800';
    }
    
    function getStatusColors(status) {
      const colors = {
        TODO: 'bg-gray-100 text-gray-600',
        IN_PROGRESS: 'bg-blue-100 text-blue-600',
        DONE: 'bg-green-100 text-green-600'
      };
      return colors[status];
    }
    
    function renderBurndownChart() {
      import('../components/BurndownChart.jsx').then(module => {
        const BurndownChart = module.default;
        const container = document.getElementById('burndown-chart-container');
        if (container) {
          // Render the burndown chart component
          container.innerHTML = '<div id="burndown-chart-component"></div>';
          // The actual chart rendering would happen here
        }
      });
    }
    
    // Global functions
    window.showCreateStoryModal = function() {
      addRecentActivity('created', 'Nueva historia', ' a√±adida al backlog');
    };
    
    // Initialize dashboard
    function initializeDashboard() {
      renderSprintMetrics();
      renderKanbanBoard();
      renderBurndownChart();
      renderRecentActivity();
      
      // Update loading state
      const loadingElement = document.getElementById('dashboard-loading');
      if (loadingElement) {
        loadingElement.style.display = 'none';
      }
      
      // Show crisis indicator if needed
      const remainingPoints = appData.activeSprint.totalPoints - appData.activeSprint.completedPoints;
      const daysRemaining = Math.ceil((new Date(appData.activeSprint.endDate) - new Date()) / (1000 * 60 * 60 * 24));
      if (remainingPoints > 10 && daysRemaining <= 3) {
        document.getElementById('crisis-indicator').classList.remove('hidden');
      }
      
      forceUpdatePageContent();
    }
    
    // Listen for language changes
    window.addEventListener('localeChanged', () => {
      initializeDashboard();
    });
    
    // Initialize
    initializeDashboard();
    
    // Simulate random activities for demo
    setTimeout(() => {
      if (Math.random() > 0.7) {
        addRecentActivity('impediment', 'Procrastinaci√≥n sistem√°tica detectada', ' afectando velocity del sprint');
      }
    }, 30000);
  });
</script>

<style>
  @keyframes celebrationPop {
    0% { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
    50% { transform: translate(-50%, -50%) scale(1.1); opacity: 1; }
    100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
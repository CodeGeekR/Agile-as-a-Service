---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
---

<Layout title="Dashboard - Tu Deplorable Existencia Organizada | AaaS">
  <Header />
  
  <main class="min-h-screen bg-gray-50">
    <!-- Mobile-First Dashboard Header -->
    <div class="bg-white border-b border-gray-200 sticky top-16 z-40">
      <div class="px-4 sm:px-6 lg:px-8 py-4">
        <div class="flex flex-col space-y-4 lg:flex-row lg:items-center lg:justify-between lg:space-y-0">
          <!-- Sprint Info -->
          <div class="min-w-0 flex-1">
            <div class="flex items-center space-x-3">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
              </div>
              <div class="min-w-0 flex-1">
                <h1 class="text-lg sm:text-xl font-semibold text-gray-900 truncate" id="sprint-title" data-i18n="dashboard.title">
                  Sprint: "Supervivencia Básica Q1 2025"
                </h1>
                <p class="text-sm text-gray-500 mt-1" id="sprint-summary" data-i18n="dashboard.loading">
                  Cargando información del sprint...
                </p>
              </div>
            </div>
          </div>
          
          <!-- Actions -->
          <div class="flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-3">
            <div id="sprint-status" class="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium bg-red-50 text-red-700 border border-red-200" data-i18n="dashboard.inCrisis">
              <div class="w-1.5 h-1.5 bg-red-500 rounded-full mr-2 animate-pulse"></div>
              🔥 En Crisis
            </div>
            <div class="flex space-x-2">
              <button id="new-story-btn" class="flex-1 sm:flex-none inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 transition-colors" data-i18n="dashboard.createStory">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Crear Historia
              </button>
              <button id="sprint-planning-btn" class="hidden sm:inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors" data-i18n="dashboard.sprintPlanning">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                Sprint Planning
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Content Container -->
    <div class="px-4 sm:px-6 lg:px-8 py-6 space-y-8">
      <!-- Sprint Metrics - Mobile Optimized -->
      <div class="grid grid-cols-2 lg:grid-cols-4 gap-4" id="sprint-metrics">
        <!-- Metrics will be populated by JavaScript -->
      </div>

      <!-- Alert Banner -->
      <div id="alert-banner" class="hidden">
        <!-- Alert will be populated by JavaScript -->
      </div>

      <!-- Main Content Grid -->
      <div class="grid grid-cols-1 xl:grid-cols-4 gap-8">
        <!-- Kanban Board - Takes most space -->
        <div class="xl:col-span-3">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-lg font-semibold text-gray-900" data-i18n="dashboard.kanbanTitle">
              Tablero Kanban de la Existencia
            </h2>
            <!-- Mobile Menu Button -->
            <button id="mobile-menu-btn" class="lg:hidden p-2 text-gray-400 hover:text-gray-600 rounded-lg">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
              </svg>
            </button>
          </div>
          
          <!-- Kanban Container -->
          <div id="kanban-container" class="overflow-x-auto">
            <!-- This will be populated by JavaScript -->
          </div>
        </div>

        <!-- Sidebar - Charts and Activity -->
        <div class="xl:col-span-1 space-y-6">
          <!-- Burndown Chart -->
          <div id="burndown-container">
            <!-- This will be populated by JavaScript -->
          </div>

          <!-- Recent Activity -->
          <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
            <div class="px-4 py-3 border-b border-gray-200">
              <h3 class="text-sm font-semibold text-gray-900" data-i18n="dashboard.recentActivity">
                Actividad Reciente del Sprint
              </h3>
            </div>
            <div class="p-4 space-y-3" id="recent-activity">
              <!-- Activity will be populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Mobile Bottom Navigation -->
  <div class="lg:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 z-50">
    <div class="flex items-center justify-around">
      <button class="flex flex-col items-center space-y-1 p-2 text-gray-600">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
        </svg>
        <span class="text-xs">Board</span>
      </button>
      <button id="mobile-new-story" class="flex flex-col items-center space-y-1 p-2 text-blue-600">
        <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
          <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
        </div>
        <span class="text-xs">New</span>
      </button>
      <button class="flex flex-col items-center space-y-1 p-2 text-gray-600">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
        <span class="text-xs">Charts</span>
      </button>
    </div>
  </div>

  <!-- Modals Container -->
  <div id="modals-container"></div>
</Layout>

<script>
  // Import i18n system
  import('../i18n/index.js').then(i18nModule => {
    const { t, getLocale, forceUpdatePageContent } = i18nModule;
    
    // Check authentication
    const token = localStorage.getItem('aaas-auth-token');
    const userData = localStorage.getItem('aaas-user');
    
    if (!token || !userData) {
      window.location.href = '/';
      return;
    }
    
    const user = JSON.parse(userData);
    let appData = JSON.parse(localStorage.getItem('aaas-data') || '{}');
    
    // Function to get localized data based on current language
    function getLocalizedData() {
      const currentLocale = getLocale();
      
      if (currentLocale === 'en') {
        return {
          epics: [
            {
              id: 1,
              title: "Basic Survival Q1 2025",
              description: "Fundamental epic to maintain operational existence",
              status: "ACTIVE",
              userId: user.id
            }
          ],
          stories: [
            {
              id: 1,
              title: "As a human being, I want to drink coffee so I don't collapse existentially",
              description: "Critical blocker: caffeine dependency management. Requires stakeholder analysis (barista), local coffee shop market research, and post-caffeine retrospective to optimize the process.",
              status: "TODO",
              points: 8,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "CRITICAL",
              tags: ["blocker", "dependency"]
            },
            {
              id: 2,
              title: "As a responsible adult, I want to take out the trash to maintain neighborly relations",
              description: "High-priority epic: waste management with external stakeholder impact. Includes reputational risk analysis and contingency plan for forgetfulness.",
              status: "TODO",
              points: 13,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "HIGH",
              tags: ["social-impact", "recurring"]
            },
            {
              id: 3,
              title: "As a functional member of society, I want to shower to be socially acceptable",
              description: "Critical story for maintaining hygiene standards according to social acceptance framework. Currently blocked by hot water availability and personal motivation.",
              status: "IN_PROGRESS",
              points: 5,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "MEDIUM",
              tags: ["hygiene", "blocked"]
            },
            {
              id: 4,
              title: "As a person with a bed, I want to make it to feel productive",
              description: "Low-complexity story but high psychological impact. Successfully delivered after 3 sprints of refinement and multiple retrospectives on sheet-folding techniques.",
              status: "DONE",
              points: 2,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "LOW",
              tags: ["quick-win", "psychological"]
            },
            {
              id: 5,
              title: "As a professional, I want to check emails to maintain the illusion of productivity",
              description: "High-volume recurring task with questionable ROI. Includes sub-tasks of classification, automatic response, and structured procrastination.",
              status: "IN_PROGRESS",
              points: 3,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "MEDIUM",
              tags: ["recurring", "low-value"]
            }
          ],
          activeSprint: {
            id: 1,
            name: "Basic Survival Sprint",
            startDate: new Date(Date.now() - 11 * 24 * 60 * 60 * 1000).toISOString(),
            endDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
            status: "ACTIVE",
            goal: "Maintain operational existence with minimum human functionality KPIs",
            totalPoints: 31,
            completedPoints: 2,
            userId: user.id
          }
        };
      } else {
        return {
          epics: [
            {
              id: 1,
              title: "Supervivencia Básica Q1 2025",
              description: "Epic fundamental para mantener la existencia operativa",
              status: "ACTIVE",
              userId: user.id
            }
          ],
          stories: [
            {
              id: 1,
              title: "Como ser humano, quiero beber café para no colapsar existencialmente",
              description: "Bloqueador crítico: gestión de dependencia de cafeína. Requiere análisis de stakeholders (barista), research de mercado de cafeterías locales y retrospectiva post-cafeína para optimizar el proceso.",
              status: "TODO",
              points: 8,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "CRITICAL",
              tags: ["blocker", "dependency"]
            },
            {
              id: 2,
              title: "Como adulto responsable, quiero sacar la basura para mantener relaciones vecinales",
              description: "Epic de alta prioridad: gestión de residuos con impacto en stakeholders externos. Incluye análisis de riesgo reputacional y plan de contingencia para olvidos.",
              status: "TODO",
              points: 13,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "HIGH",
              tags: ["social-impact", "recurring"]
            },
            {
              id: 3,
              title: "Como miembro funcional de la sociedad, quiero ducharme para ser socialmente aceptable",
              description: "Historia crítica para mantener estándares de higiene según framework de aceptación social. Actualmente bloqueada por disponibilidad de agua caliente y motivación personal.",
              status: "IN_PROGRESS",
              points: 5,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "MEDIUM",
              tags: ["hygiene", "blocked"]
            },
            {
              id: 4,
              title: "Como persona con cama, quiero hacerla para sentirme productivo",
              description: "Historia de baja complejidad pero alto impacto psicológico. Entregada exitosamente después de 3 sprints de refinamiento y múltiples retrospectivas sobre técnicas de doblado de sábanas.",
              status: "DONE",
              points: 2,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "LOW",
              tags: ["quick-win", "psychological"]
            },
            {
              id: 5,
              title: "Como profesional, quiero revisar emails para mantener la ilusión de productividad",
              description: "Tarea recurrente de alto volumen con ROI cuestionable. Incluye sub-tareas de clasificación, respuesta automática y procrastinación estructurada.",
              status: "IN_PROGRESS",
              points: 3,
              epicId: 1,
              sprintId: 1,
              assignee: user.name.split(' ').map(n => n[0]).join(''),
              priority: "MEDIUM",
              tags: ["recurring", "low-value"]
            }
          ],
          activeSprint: {
            id: 1,
            name: "Sprint de Supervivencia Básica",
            startDate: new Date(Date.now() - 11 * 24 * 60 * 60 * 1000).toISOString(),
            endDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
            status: "ACTIVE",
            goal: "Mantener la existencia operativa con KPIs mínimos de funcionalidad humana",
            totalPoints: 31,
            completedPoints: 2,
            userId: user.id
          }
        };
      }
    }
    
    // Initialize default data if not exists or update with current language
    if (!appData.stories || Object.keys(appData).length === 0) {
      appData = getLocalizedData();
      localStorage.setItem('aaas-data', JSON.stringify(appData));
    } else {
      // Update existing data with current language while preserving status
      const localizedData = getLocalizedData();
      
      // Preserve story statuses
      localizedData.stories.forEach((newStory, index) => {
        if (appData.stories[index]) {
          newStory.status = appData.stories[index].status;
        }
      });
      
      // Preserve sprint progress
      localizedData.activeSprint.completedPoints = appData.activeSprint?.completedPoints || 2;
      
      appData = localizedData;
      localStorage.setItem('aaas-data', JSON.stringify(appData));
    }
    
    function saveData() {
      localStorage.setItem('aaas-data', JSON.stringify(appData));
    }
    
    function getStoriesByStatus(status) {
      return appData.stories.filter(s => s.sprintId === appData.activeSprint.id && s.status === status);
    }
    
    function updateStoryStatus(storyId, newStatus) {
      const story = appData.stories.find(s => s.id === storyId);
      if (story) {
        story.status = newStatus;
        
        // Update completed points
        const completedStories = getStoriesByStatus('DONE');
        appData.activeSprint.completedPoints = completedStories.reduce((sum, s) => sum + s.points, 0);
        
        saveData();
        renderDashboard();
        
        // Show celebration for completed tasks
        if (newStatus === 'DONE') {
          showCompletionCelebration(story);
        }
      }
    }
    
    function showCompletionCelebration(story) {
      const celebration = document.createElement('div');
      celebration.innerHTML = `
        <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; 
                    padding: 24px; border-radius: 16px; z-index: 1000; text-align: center;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.15); animation: celebrationPop 0.6s ease-out;
                    backdrop-filter: blur(10px);">
          <div style="font-size: 32px; margin-bottom: 12px;">🎉</div>
          <div style="font-weight: 600; margin-bottom: 8px; font-size: 18px;">${t('story.completed')}</div>
          <div style="font-size: 14px; opacity: 0.9;">${t('story.pointsEarned', { points: story.points })}</div>
        </div>
      `;
      
      document.body.appendChild(celebration);
      
      setTimeout(() => {
        document.body.removeChild(celebration);
      }, 3000);
    }
    
    function renderDashboard() {
      const sprint = appData.activeSprint;
      const sprintStories = appData.stories.filter(s => s.sprintId === sprint.id);
      const remainingPoints = sprint.totalPoints - sprint.completedPoints;
      const daysRemaining = Math.ceil((new Date(sprint.endDate) - new Date()) / (1000 * 60 * 60 * 24));
      const progress = Math.round((sprint.completedPoints / sprint.totalPoints) * 100);
      const velocity = (sprint.completedPoints / 11).toFixed(1);
      
      // Update sprint title and summary
      document.getElementById('sprint-title').textContent = t('dashboard.title');
      document.getElementById('sprint-summary').textContent = 
        `${sprintStories.length} ${t('dashboard.activeStories')} • ${daysRemaining} ${t('dashboard.daysRemainingText')} • ${remainingPoints} ${t('dashboard.pointsToComplete')}`;
      
      // Update metrics with Linear-inspired design
      document.getElementById('sprint-metrics').innerHTML = `
        <div class="bg-white rounded-xl border border-gray-200 p-4 hover:shadow-sm transition-shadow">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold ${remainingPoints > 20 ? 'text-red-600' : 'text-amber-600'}">${remainingPoints}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide">${t('dashboard.pointsRemaining')}</div>
            </div>
            <div class="w-8 h-8 bg-red-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4 hover:shadow-sm transition-shadow">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold ${daysRemaining <= 3 ? 'text-red-600' : 'text-amber-600'}">${daysRemaining}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide">${t('dashboard.daysRemaining')}</div>
            </div>
            <div class="w-8 h-8 bg-amber-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4 hover:shadow-sm transition-shadow">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold text-emerald-600">${progress}%</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide">${t('dashboard.completed')}</div>
            </div>
            <div class="w-8 h-8 bg-emerald-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-xl border border-gray-200 p-4 hover:shadow-sm transition-shadow">
          <div class="flex items-center justify-between">
            <div>
              <div class="text-2xl font-bold ${velocity < 2 ? 'text-red-600' : 'text-emerald-600'}">${velocity}</div>
              <div class="text-xs font-medium text-gray-500 uppercase tracking-wide">${t('dashboard.velocity')}</div>
            </div>
            <div class="w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
            </div>
          </div>
        </div>
      `;
      
      // Update alert banner with Linear-inspired design
      const successProbability = Math.max(0, Math.min(100, 100 - (remainingPoints / (daysRemaining * velocity)) * 20));
      
      if (successProbability < 70) {
        document.getElementById('alert-banner').className = '';
        document.getElementById('alert-banner').innerHTML = `
          <div class="bg-gradient-to-r ${successProbability < 30 ? 'from-red-50 to-red-100 border-red-200' : 'from-amber-50 to-amber-100 border-amber-200'} border rounded-xl p-4">
            <div class="flex items-start space-x-3">
              <div class="flex-shrink-0">
                <div class="w-8 h-8 ${successProbability < 30 ? 'bg-red-100' : 'bg-amber-100'} rounded-lg flex items-center justify-center">
                  <svg class="w-4 h-4 ${successProbability < 30 ? 'text-red-600' : 'text-amber-600'}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                </div>
              </div>
              <div class="min-w-0 flex-1">
                <h3 class="${successProbability < 30 ? 'text-red-900' : 'text-amber-900'} font-semibold text-sm">
                  ${successProbability < 30 ? t('dashboard.criticalRisk') : t('dashboard.risk')}
                </h3>
                <p class="${successProbability < 30 ? 'text-red-800' : 'text-amber-800'} text-sm mt-1 leading-relaxed">
                  ${successProbability < 30 ? t('dashboard.criticalMessage') : t('dashboard.riskMessage')}
                </p>
              </div>
            </div>
          </div>
        `;
      } else {
        document.getElementById('alert-banner').className = 'hidden';
      }
      
      // Render Kanban Board
      renderKanbanBoard();
      
      // Render Burndown Chart
      renderBurndownChart();
      
      // Update recent activity
      const currentLocale = getLocale();
      const coffeeTask = currentLocale === 'en' ? 'Make coffee' : 'Hacer café';
      const bedTask = currentLocale === 'en' ? 'Make the bed' : 'Hacer la cama';
      const motivationIssue = currentLocale === 'en' ? 'Lack of motivation affecting sprint velocity' : 'Falta de motivación afectando el velocity del sprint';
      const waitingText = currentLocale === 'en' ? 'is waiting for external dependency resolution (buy coffee)' : 'está esperando resolución de dependencia externa (comprar café)';
      const movedText = currentLocale === 'en' ? 'moved to Done' : 'movida a Done';
      
      document.getElementById('recent-activity').innerHTML = `
        <div class="flex items-start space-x-3">
          <div class="flex-shrink-0 w-6 h-6 bg-red-100 rounded-full flex items-center justify-center mt-0.5">
            <div class="w-2 h-2 bg-red-500 rounded-full"></div>
          </div>
          <div class="min-w-0 flex-1">
            <p class="text-sm text-gray-900">
              <span class="font-medium">${t('dashboard.storyBlocked')}</span> "${coffeeTask}" ${waitingText}
            </p>
            <p class="text-xs text-gray-500 mt-1">${t('dashboard.hoursAgo', { hours: 2 })}</p>
          </div>
        </div>
        
        <div class="flex items-start space-x-3">
          <div class="flex-shrink-0 w-6 h-6 bg-emerald-100 rounded-full flex items-center justify-center mt-0.5">
            <svg class="w-3 h-3 text-emerald-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="min-w-0 flex-1">
            <p class="text-sm text-gray-900">
              <span class="font-medium">${t('dashboard.storyCompleted')}</span> "${bedTask}" ${movedText}
            </p>
            <p class="text-xs text-gray-500 mt-1">${t('dashboard.daysAgo', { days: 1 })}</p>
          </div>
        </div>
        
        <div class="flex items-start space-x-3">
          <div class="flex-shrink-0 w-6 h-6 bg-amber-100 rounded-full flex items-center justify-center mt-0.5">
            <div class="w-2 h-2 bg-amber-500 rounded-full"></div>
          </div>
          <div class="min-w-0 flex-1">
            <p class="text-sm text-gray-900">
              <span class="font-medium">${t('dashboard.impedimentIdentified')}</span> ${motivationIssue}
            </p>
            <p class="text-xs text-gray-500 mt-1">${t('dashboard.daysAgo', { days: 2 })}</p>
          </div>
        </div>
      `;
    }
    
    function renderKanbanBoard() {
      const todoStories = getStoriesByStatus('TODO');
      const inProgressStories = getStoriesByStatus('IN_PROGRESS');
      const doneStories = getStoriesByStatus('DONE');
      
      function renderStoryCard(story) {
        const priorityColors = {
          'CRITICAL': 'border-l-red-500 bg-red-50',
          'HIGH': 'border-l-orange-500 bg-orange-50',
          'MEDIUM': 'border-l-blue-500 bg-blue-50',
          'LOW': 'border-l-gray-500 bg-gray-50'
        };
        
        const pointsColor = story.points <= 3 ? 'bg-emerald-100 text-emerald-700' : 
                           story.points <= 8 ? 'bg-amber-100 text-amber-700' : 
                           'bg-red-100 text-red-700';
        
        const priorityIcon = {
          'CRITICAL': '🔥',
          'HIGH': '⬆️',
          'MEDIUM': '➡️',
          'LOW': '⬇️'
        }[story.priority] || '➡️';
        
        return `
          <div class="bg-white border-l-4 ${priorityColors[story.priority]} rounded-lg shadow-sm hover:shadow-md transition-all duration-200 cursor-move group border border-gray-200" 
               draggable="true" 
               data-story-id="${story.id}"
               ondragstart="handleDragStart(event)"
               ondragend="handleDragEnd(event)">
            <div class="p-4">
              <div class="flex items-start justify-between mb-3">
                <div class="flex items-start space-x-2 flex-1 min-w-0">
                  <span class="text-sm flex-shrink-0 mt-0.5">${priorityIcon}</span>
                  <h3 class="text-sm font-medium text-gray-900 line-clamp-2 group-hover:text-gray-700 transition-colors">
                    ${story.title}
                  </h3>
                </div>
                <span class="${pointsColor} text-xs font-semibold px-2 py-1 rounded-full ml-2 flex-shrink-0">
                  ${story.points}
                </span>
              </div>
              
              <p class="text-xs text-gray-500 mb-3 line-clamp-2 leading-relaxed">
                ${story.description.substring(0, 100)}...
              </p>
              
              <div class="flex items-center justify-between">
                <span class="text-xs text-gray-400 font-mono">#${story.id}</span>
                <div class="flex items-center space-x-2">
                  ${story.tags.slice(0, 2).map(tag => `
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                      ${tag}
                    </span>
                  `).join('')}
                  <div class="w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span class="text-white text-xs font-medium">${story.assignee}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
      }
      
      const columnClasses = {
        'TODO': 'bg-gray-50',
        'IN_PROGRESS': 'bg-blue-50',
        'DONE': 'bg-emerald-50'
      };
      
      const columnIcons = {
        'TODO': `<svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                 </svg>`,
        'IN_PROGRESS': `<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>`,
        'DONE': `<svg class="w-4 h-4 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                 </svg>`
      };
      
      document.getElementById('kanban-container').innerHTML = `
        <div class="flex space-x-6 pb-6 min-w-max lg:min-w-0">
          <!-- TODO Column -->
          <div class="w-80 lg:flex-1 ${columnClasses['TODO']} rounded-xl p-4 min-h-96" 
               ondragover="handleDragOver(event)" 
               ondrop="handleDrop(event, 'TODO')">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-2">
                ${columnIcons['TODO']}
                <h2 class="font-semibold text-gray-700 text-sm uppercase tracking-wide">${t('dashboard.todo')}</h2>
              </div>
              <span class="bg-gray-600 text-white text-xs font-medium px-2 py-1 rounded-full">
                ${todoStories.length}
              </span>
            </div>
            <div class="space-y-3">
              ${todoStories.map(renderStoryCard).join('')}
            </div>
            <button onclick="showNewStoryModal()" class="w-full mt-4 p-4 border-2 border-dashed border-gray-300 text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors rounded-lg text-sm font-medium group">
              <div class="flex items-center justify-center space-x-2">
                <svg class="w-4 h-4 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                <span>${t('dashboard.createNewStory')}</span>
              </div>
            </button>
          </div>
          
          <!-- IN PROGRESS Column -->
          <div class="w-80 lg:flex-1 ${columnClasses['IN_PROGRESS']} rounded-xl p-4 min-h-96" 
               ondragover="handleDragOver(event)" 
               ondrop="handleDrop(event, 'IN_PROGRESS')">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-2">
                ${columnIcons['IN_PROGRESS']}
                <h2 class="font-semibold text-gray-700 text-sm uppercase tracking-wide">${t('dashboard.inProgress')}</h2>
              </div>
              <span class="bg-blue-600 text-white text-xs font-medium px-2 py-1 rounded-full">
                ${inProgressStories.length}
              </span>
            </div>
            <div class="space-y-3">
              ${inProgressStories.map(renderStoryCard).join('')}
            </div>
            ${inProgressStories.length >= 3 ? `
              <div class="bg-red-50 border border-red-200 rounded-lg p-3 mt-4">
                <div class="flex items-start space-x-2">
                  <svg class="w-4 h-4 text-red-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                  <p class="text-red-800 text-xs leading-relaxed">
                    <strong>${t('dashboard.wipLimitExceeded')}</strong> ${t('dashboard.wipLimit')}
                  </p>
                </div>
              </div>
            ` : ''}
          </div>
          
          <!-- DONE Column -->
          <div class="w-80 lg:flex-1 ${columnClasses['DONE']} rounded-xl p-4 min-h-96" 
               ondragover="handleDragOver(event)" 
               ondrop="handleDrop(event, 'DONE')">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-2">
                ${columnIcons['DONE']}
                <h2 class="font-semibold text-gray-700 text-sm uppercase tracking-wide">${t('dashboard.done')}</h2>
              </div>
              <span class="bg-emerald-600 text-white text-xs font-medium px-2 py-1 rounded-full">
                ${doneStories.length}
              </span>
            </div>
            <div class="space-y-3">
              ${doneStories.map(renderStoryCard).join('')}
            </div>
          </div>
        </div>
      `;
    }
    
    function renderBurndownChart() {
      const sprint = appData.activeSprint;
      const remainingPoints = sprint.totalPoints - sprint.completedPoints;
      const daysRemaining = Math.ceil((new Date(sprint.endDate) - new Date()) / (1000 * 60 * 60 * 1000 * 24));
      const velocity = (sprint.completedPoints / 11).toFixed(1);
      const successProbability = Math.max(0, Math.min(100, 100 - (remainingPoints / (daysRemaining * velocity)) * 20));
      
      document.getElementById('burndown-container').innerHTML = `
        <div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
          <div class="px-4 py-3 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h3 class="text-sm font-semibold text-gray-900">${t('dashboard.burndownTitle')}</h3>
              <div class="flex items-center space-x-3 text-xs">
                <div class="flex items-center space-x-1">
                  <div class="w-3 h-0.5 bg-emerald-500 rounded" style="border: 1px dashed #10b981;"></div>
                  <span class="text-gray-500">${t('dashboard.ideal')}</span>
                </div>
                <div class="flex items-center space-x-1">
                  <div class="w-3 h-0.5 bg-blue-500 rounded"></div>
                  <span class="text-gray-500">${t('dashboard.reality')}</span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="p-4">
            <div class="bg-gray-50 rounded-lg h-32 flex items-center justify-center mb-4">
              <div class="text-center">
                <div class="text-2xl mb-2">📉</div>
                <p class="text-gray-500 text-xs">${t('dashboard.despairChart')}</p>
                <p class="text-xs text-gray-400 mt-1">
                  ${successProbability < 50 ? t('dashboard.trendWorsening') : t('dashboard.trendImproving')}
                </p>
              </div>
            </div>
            
            <div class="space-y-3">
              <div class="flex items-center justify-between text-xs">
                <span class="text-gray-500">${t('dashboard.successProbability')}</span>
                <span class="font-semibold ${successProbability < 30 ? 'text-red-600' : successProbability < 70 ? 'text-amber-600' : 'text-emerald-600'}">
                  ${Math.round(successProbability)}%
                </span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="h-2 rounded-full ${successProbability < 30 ? 'bg-red-500' : successProbability < 70 ? 'bg-amber-500' : 'bg-emerald-500'}" 
                     style="width: ${successProbability}%"></div>
              </div>
            </div>
          </div>
        </div>
      `;
    }
    
    // Drag and Drop functionality
    let draggedStoryId = null;
    
    window.handleDragStart = function(e) {
      draggedStoryId = parseInt(e.target.dataset.storyId);
      e.target.style.opacity = '0.5';
      e.target.style.transform = 'rotate(5deg)';
    };
    
    window.handleDragEnd = function(e) {
      e.target.style.opacity = '1';
      e.target.style.transform = 'rotate(0deg)';
      draggedStoryId = null;
    };
    
    window.handleDragOver = function(e) {
      e.preventDefault();
    };
    
    window.handleDrop = function(e, newStatus) {
      e.preventDefault();
      
      if (draggedStoryId && draggedStoryId !== null) {
        const story = appData.stories.find(s => s.id === draggedStoryId);
        if (story && story.status !== newStatus) {
          // Check WIP limits for IN_PROGRESS
          if (newStatus === 'IN_PROGRESS') {
            const inProgressCount = getStoriesByStatus('IN_PROGRESS').length;
            if (inProgressCount >= 3) {
              alert(t('dashboard.wipLimitReached'));
              return;
            }
          }
          
          updateStoryStatus(draggedStoryId, newStatus);
        }
      }
    };
    
    // Modal functions with Linear-inspired design
    window.showNewStoryModal = function() {
      document.getElementById('modals-container').innerHTML = `
        <div class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-hidden">
            <div class="bg-gradient-to-r from-gray-900 to-gray-800 text-white p-6">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                  <div class="w-8 h-8 bg-white bg-opacity-20 rounded-lg flex items-center justify-center">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                  </div>
                  <h2 class="text-lg font-semibold">${t('story.createNew')}</h2>
                </div>
                <button onclick="closeModal()" class="text-white hover:text-gray-300 transition-colors p-1 rounded-lg hover:bg-white hover:bg-opacity-10">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            
            <form onsubmit="createNewStory(event)" class="p-6 space-y-6">
              <div>
                <label class="block text-sm font-semibold text-gray-900 mb-3">${t('story.title')}</label>
                <input type="text" id="story-title" class="w-full p-4 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" placeholder="${t('story.titlePlaceholder')}" required />
              </div>
              
              <div>
                <label class="block text-sm font-semibold text-gray-900 mb-3">${t('story.description')}</label>
                <textarea id="story-description" class="w-full p-4 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none" rows="3" placeholder="${t('story.descriptionPlaceholder')}"></textarea>
              </div>
              
              <div>
                <label class="block text-sm font-semibold text-gray-900 mb-3">${t('story.storyPoints')}</label>
                <div class="flex space-x-2">
                  ${[1, 2, 3, 5, 8, 13, 21].map(points => `
                    <button type="button" onclick="selectPoints(${points})" class="story-points-btn w-12 h-12 rounded-xl font-bold transition-all bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-105" data-points="${points}">
                      ${points}
                    </button>
                  `).join('')}
                </div>
                <input type="hidden" id="story-points" value="3" />
              </div>
              
              <div class="flex space-x-3 pt-4">
                <button type="button" onclick="closeModal()" class="flex-1 px-6 py-3 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-xl font-medium transition-colors">
                  ${t('story.cancel')}
                </button>
                <button type="submit" class="flex-1 px-6 py-3 bg-gray-900 hover:bg-gray-800 text-white rounded-xl font-medium transition-colors">
                  ${t('story.create')}
                </button>
              </div>
            </form>
          </div>
        </div>
      `;
      
      // Select default points
      selectPoints(3);
    };
    
    window.selectPoints = function(points) {
      document.getElementById('story-points').value = points;
      document.querySelectorAll('.story-points-btn').forEach(btn => {
        if (parseInt(btn.dataset.points) === points) {
          btn.className = 'story-points-btn w-12 h-12 rounded-xl font-bold transition-all bg-gray-900 text-white scale-105';
        } else {
          btn.className = 'story-points-btn w-12 h-12 rounded-xl font-bold transition-all bg-gray-100 text-gray-700 hover:bg-gray-200 hover:scale-105';
        }
      });
    };
    
    window.createNewStory = function(e) {
      e.preventDefault();
      
      const title = document.getElementById('story-title').value;
      const description = document.getElementById('story-description').value;
      const points = parseInt(document.getElementById('story-points').value);
      
      const newStory = {
        id: Date.now(),
        title: title,
        description: description || t('dashboard.noSpecificDescription'),
        status: 'TODO',
        points: points,
        epicId: 1,
        sprintId: appData.activeSprint.id,
        assignee: user.name.split(' ').map(n => n[0]).join(''),
        priority: 'MEDIUM',
        tags: ['new']
      };
      
      appData.stories.push(newStory);
      appData.activeSprint.totalPoints += points;
      saveData();
      renderDashboard();
      closeModal();
    };
    
    window.closeModal = function() {
      document.getElementById('modals-container').innerHTML = '';
    };
    
    // Event listeners
    document.getElementById('sprint-planning-btn').addEventListener('click', () => {
      alert(t('dashboard.sprintPlanningMessage'));
    });
    
    document.getElementById('new-story-btn').addEventListener('click', showNewStoryModal);
    document.getElementById('mobile-new-story').addEventListener('click', showNewStoryModal);
    
    // Listen for language changes and update everything
    window.addEventListener('localeChanged', () => {
      console.log('🌐 Dashboard: Language changed, updating data and UI...');
      
      // Update data with new language while preserving status
      const localizedData = getLocalizedData();
      
      // Preserve story statuses
      localizedData.stories.forEach((newStory, index) => {
        if (appData.stories[index]) {
          newStory.status = appData.stories[index].status;
        }
      });
      
      // Preserve sprint progress
      localizedData.activeSprint.completedPoints = appData.activeSprint?.completedPoints || 2;
      
      appData = localizedData;
      saveData();
      
      // Force update all page content
      forceUpdatePageContent();
      
      // Re-render dashboard with new data
      renderDashboard();
    });
    
    // Initialize dashboard
    renderDashboard();
    
    // Force update page content after initial render
    setTimeout(() => {
      forceUpdatePageContent();
    }, 100);
  });
</script>

<style>
  @keyframes celebrationPop {
    0% { transform: translate(-50%, -50%) scale(0.8) rotate(-5deg); opacity: 0; }
    50% { transform: translate(-50%, -50%) scale(1.1) rotate(2deg); opacity: 1; }
    100% { transform: translate(-50%, -50%) scale(1) rotate(0deg); opacity: 1; }
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Custom scrollbar for horizontal scroll */
  #kanban-container::-webkit-scrollbar {
    height: 6px;
  }
  
  #kanban-container::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }
  
  #kanban-container::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }
  
  #kanban-container::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
  
  /* Smooth transitions for drag and drop */
  [draggable="true"] {
    transition: all 0.2s ease;
  }
  
  [draggable="true"]:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }
  
  /* Mobile bottom navigation spacing */
  @media (max-width: 1024px) {
    main {
      padding-bottom: 80px;
    }
  }
  
  /* Responsive grid improvements */
  @media (max-width: 640px) {
    .grid.grid-cols-2 {
      grid-template-columns: 1fr 1fr;
      gap: 0.75rem;
    }
  }
</style>